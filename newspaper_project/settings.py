"""
Django settings for newspaper_project project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'wsh#0t(e9kzf)5yrqg1)j2uenxbw=3uowqk0!jakzgsfocp*&x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*'] #setting the site for production


# Application definition
INSTALLED_APPS = [
    #Local apps
    'pages.apps.PagesConfig', #Registering the pages app i have created
    #this app handles all the static sides which is the home page linked to the base
    'users.apps.UsersConfig', #Registering the users app i have created
    #this app handles the all dynamic side of the user auth flow which is login, signup etc
    'articles.apps.ArticlesConfig', #Registering the articles app i have created
    #this app handles the dynamic side of the users which is posting, commenting etc

    #Third party apps(developed by someone and a company)
    #crispy_forms makes it easy and beautify forms to work with and enable the DRY principle
    'crispy_forms',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

#setting the timestamp which will keep the time at which the event occurs and overiding the default
# value provided by django.
TIME_ZONE = 'Africa/Lagos'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'newspaper_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], #informing django of where to search for our templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'newspaper_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

#We declare the AUTH_USER_MODEL to tell Django to use the CustomUser model we have created 
# instead of the built in User model. using get_user_model(), we can call it out
#Since it exist within our users app, we will reference it as users.CustomUsers
AUTH_USER_MODEL = 'users.CustomUser'

#we declare the login redirect url to redirect the user after successive login and logout to 
#the home page using the url name which is "home"
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

#Since I am using bootstrap, i will configure it here to inform django of my template choice
CRISPY_TEMPLATE_PACK = "bootstrap4"

#The configurtion that is required to tell django to send mail locally to our command line console
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#The configurtion that is required to tell django to send mail live to the provided email address by the user
#Note, locally we use console and live we use smtp 
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


#Using mail gun to enable us send our mails to users
#sign up for free and use free services 
#The following below is the neccessary details to be provided to enable the use of it
#Note, host username and password will differ from one person to the another
EMAIL_HOST = 'smtp.mailgun.org'
EMAIL_HOST_USER = 'postmaster@sandbox91793e9d280b4a9bb5e730c745e54dbc.mailgun.org'
EMAIL_HOST_PASSWORD = 'd7f4b7b3adcbf86116352120279d9586-0afbfc6c-6f75eb45'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
